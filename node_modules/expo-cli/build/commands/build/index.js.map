{"version":3,"sources":["../../../src/commands/build/index.ts"],"names":["program","command","alias","helpGroup","option","description","checkConfig"],"mappings":";;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEe,kBAAUA,OAAV,EAA4B;AACzC,sDACEA,OAAO,CACJC,OADH,CACW,kBADX,EAEGC,KAFH,CAES,IAFT,EAGGC,SAHH,CAGa,OAHb,EAIGC,MAJH,CAIU,yBAJV,EAIqC,+CAJrC,EAKGA,MALH,CAKU,mBALV,EAK+B,yDAL/B,EAMGA,MANH,CAMU,kBANV,EAM8B,uDAN9B,EAOGA,MAPH,CAQI,mBARJ,EASI,qHATJ,EAWGA,MAXH,CAWU,8BAXV,EAW0C,qDAX1C,EAYGA,MAZH,CAaI,yBAbJ,EAcI,wFAdJ,EAgBGA,MAhBH,CAiBI,oBAjBJ,EAkBI,wGAlBJ,EAoBGA,MApBH,CAoBU,mBApBV,EAoB+B,qCApB/B,EAqBGA,MArBH,CAqBU,kCArBV,EAqB8C,sCArB9C,EAqBsF,SArBtF,EAsBGA,MAtBH,CAsBU,cAtBV,EAsB0B,+CAtB1B,EAuBGA,MAvBH,CAuBU,WAvBV,EAuBuB,0CAvBvB,EAwBGA,MAxBH,CAwBU,0BAxBV,EAwBsC,gBAxBtC,EAyBGA,MAzBH,CA0BI,4BA1BJ,EA2BI,8GA3BJ,EA6BGA,MA7BH,CA6BU,qBA7BV,EA6BiC,+BA7BjC,EA8BGA,MA9BH,CA8BU,0BA9BV,EA8BsC,iCA9BtC,EA+BGA,MA/BH,CAgCI,gDAhCJ,EAiCI,oCAjCJ,EAmCGA,MAnCH,CAoCI,oBApCJ,EAqCI,kEArCJ,EAuCGA,MAvCH,CAuCU,0BAvCV,EAuCsC,4BAvCtC,EAwCGA,MAxCH,CAyCI,uBAzCJ,EA0CI,6DA1CJ,EA4CGC,WA5CH,CA4Ce,yDA5Cf,CADF,EA8CE,mEAAa,iBAAb,GA9CF,EA+CE;AAAEC,IAAAA,WAAW,EAAE;AAAf,GA/CF;AAkDA,sDACEN,OAAO,CACJC,OADH,CACW,sBADX,EAEGC,KAFH,CAES,IAFT,EAGGC,SAHH,CAGa,OAHb,EAIGC,MAJH,CAIU,yBAJV,EAIqC,2BAJrC,EAKGA,MALH,CAKU,kCALV,EAK8C,sCAL9C,EAKsF,SALtF,EAMGA,MANH,CAMU,cANV,EAM0B,+CAN1B,EAOGA,MAPH,CAOU,WAPV,EAOuB,0CAPvB,EAQGA,MARH,CAQU,2BARV,EAQuC,wBARvC,EASGA,MATH,CASU,0BATV,EASsC,gBATtC,EAUGA,MAVH,CAUU,qBAVV,EAUiC,sDAVjC,EAWGA,MAXH,CAYI,oBAZJ,EAaI,iEAbJ,EAeGA,MAfH,CAgBI,uBAhBJ,EAiBI,6DAjBJ,EAmBGA,MAnBH,CAmBU,mBAnBV,EAmB+B,kCAnB/B,EAoBGC,WApBH,CAoBe,yEApBf,CADF,EAsBE,mEAAa,qBAAb,GAtBF,EAuBE;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAvBF;AA0BA,sDACEN,OAAO,CACJC,OADH,CACW,kBADX,EAEGE,SAFH,CAEa,OAFb,EAGGC,MAHH,CAGU,aAHV,EAGyB,0CAHzB,EAIGA,MAJH,CAKI,UALJ,EAMI,gGANJ,EAQGA,MARH,CAQU,WARV,EAQuB,mCARvB,EASGC,WATH,CASe,kCATf,CADF,EAWE,mEAAa,iBAAb,GAXF;AAcA,sDACEL,OAAO,CACJC,OADH,CACW,qBADX,EAEGC,KAFH,CAES,IAFT,EAGGC,SAHH,CAGa,OAHb,EAIGC,MAJH,CAKI,oBALJ,EAMI,kEANJ,EAQGC,WARH,CAQgB,oDARhB,CADF,EAUE,mEAAa,oBAAb,GAVF;AAYD","sourcesContent":["import type { Command } from 'commander';\n\nimport { applyAsyncActionProjectDir } from '../utils/applyAsyncAction';\n\nexport default function (program: Command) {\n  applyAsyncActionProjectDir(\n    program\n      .command('build:ios [path]')\n      .alias('bi')\n      .helpGroup('build')\n      .option('-c, --clear-credentials', 'Clear all credentials stored on Expo servers.')\n      .option('--clear-dist-cert', 'Remove Distribution Certificate stored on Expo servers.')\n      .option('--clear-push-key', 'Remove Push Notifications Key stored on Expo servers.')\n      .option(\n        '--clear-push-cert',\n        'Remove Push Notifications Certificate stored on Expo servers. Use of Push Notifications Certificates is deprecated.'\n      )\n      .option('--clear-provisioning-profile', 'Remove Provisioning Profile stored on Expo servers.')\n      .option(\n        '-r --revoke-credentials',\n        'Revoke credentials on developer.apple.com, select appropriate using --clear-* options.'\n      )\n      .option(\n        '--apple-id <login>',\n        'Apple ID username (please also set the Apple ID password as EXPO_APPLE_PASSWORD environment variable).'\n      )\n      .option('-t --type <build>', 'Type of build: [archive|simulator].')\n      .option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default')\n      .option('--no-publish', 'Disable automatic publishing before building.')\n      .option('--no-wait', 'Exit immediately after scheduling build.')\n      .option('--team-id <apple-teamId>', 'Apple Team ID.')\n      .option(\n        '--dist-p12-path <dist.p12>',\n        'Path to your Distribution Certificate P12 (set password as EXPO_IOS_DIST_P12_PASSWORD environment variable).'\n      )\n      .option('--push-id <push-id>', 'Push Key ID (ex: 123AB4C56D).')\n      .option('--push-p8-path <push.p8>', 'Path to your Push Key .p8 file.')\n      .option(\n        '--provisioning-profile-path <.mobileprovision>',\n        'Path to your Provisioning Profile.'\n      )\n      .option(\n        '--public-url <url>',\n        'The URL of an externally hosted manifest (for self-hosted apps).'\n      )\n      .option('--skip-credentials-check', 'Skip checking credentials.')\n      .option(\n        '--skip-workflow-check',\n        'Skip warning about build service bare workflow limitations.'\n      )\n      .description('Build and sign a standalone IPA for the Apple App Store'),\n    () => import('./buildIosAsync'),\n    { checkConfig: true }\n  );\n\n  applyAsyncActionProjectDir(\n    program\n      .command('build:android [path]')\n      .alias('ba')\n      .helpGroup('build')\n      .option('-c, --clear-credentials', 'Clear stored credentials.')\n      .option('--release-channel <channel-name>', 'Pull from specified release channel.', 'default')\n      .option('--no-publish', 'Disable automatic publishing before building.')\n      .option('--no-wait', 'Exit immediately after triggering build.')\n      .option('--keystore-path <app.jks>', 'Path to your Keystore.')\n      .option('--keystore-alias <alias>', 'Keystore Alias')\n      .option('--generate-keystore', '[deprecated] Generate Keystore if one does not exist')\n      .option(\n        '--public-url <url>',\n        'The URL of an externally hosted manifest (for self-hosted apps)'\n      )\n      .option(\n        '--skip-workflow-check',\n        'Skip warning about build service bare workflow limitations.'\n      )\n      .option('-t --type <build>', 'Type of build: [app-bundle|apk].')\n      .description('Build and sign a standalone APK or App Bundle for the Google Play Store'),\n    () => import('./buildAndroidAsync'),\n    { checkConfig: true }\n  );\n\n  applyAsyncActionProjectDir(\n    program\n      .command('build:web [path]')\n      .helpGroup('build')\n      .option('-c, --clear', 'Clear all cached build files and assets.')\n      .option(\n        '--no-pwa',\n        'Prevent webpack from generating the manifest.json and injecting meta into the index.html head.'\n      )\n      .option('-d, --dev', 'Turns dev flag on before bundling')\n      .description('Build the web app for production'),\n    () => import('./buildWebAsync')\n  );\n\n  applyAsyncActionProjectDir(\n    program\n      .command('build:status [path]')\n      .alias('bs')\n      .helpGroup('build')\n      .option(\n        '--public-url <url>',\n        'The URL of an externally hosted manifest (for self-hosted apps).'\n      )\n      .description(`Get the status of the latest build for the project`),\n    () => import('./buildStatusAsync')\n  );\n}\n"],"file":"index.js"}