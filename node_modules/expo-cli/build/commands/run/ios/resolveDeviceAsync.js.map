{"version":3,"sources":["../../../../src/commands/run/ios/resolveDeviceAsync.ts"],"names":["getSimulatorsAsync","simulatorDeviceInfo","SimControl","listAsync","Object","values","devices","reduce","prev","runtime","concat","getBuildDestinationsAsync","listDevicesAsync","filter","device","deviceType","simulators","Simulator","sortDefaultDeviceToBeginningAsync","resolveDeviceAsync","ensureXcodeCommandLineToolsInstalledAsync","CommandError","ensureSimulatorOpenAsync","spinner","chalk","cyan","start","catch","stop","value","type","name","limit","message","choices","map","item","isConnected","isActive","state","symbol","format","bold","text","title","osVersion","dim","udid","suggest","input","regex","RegExp","choice","test","Log","log","find","isSimulator","searchValue","toLowerCase","resolved"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport ora from 'ora';\nimport { SimControl, Simulator } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport prompt from '../../../prompts';\nimport { profileMethod } from '../../utils/profileMethod';\n\nasync function getSimulatorsAsync(): Promise<SimControl.SimulatorDevice[]> {\n  const simulatorDeviceInfo = await SimControl.listAsync('devices');\n  return Object.values(simulatorDeviceInfo.devices).reduce((prev, runtime) => {\n    return prev.concat(runtime);\n  }, []);\n}\n\nasync function getBuildDestinationsAsync() {\n  const devices = (\n    await profileMethod(SimControl.listDevicesAsync, 'SimControl.listDevicesAsync')()\n  ).filter(device => {\n    return device.deviceType === 'device';\n  });\n\n  const simulators = await Simulator.sortDefaultDeviceToBeginningAsync(\n    await profileMethod(getSimulatorsAsync)()\n  );\n\n  return [...devices, ...simulators];\n}\n\nexport async function resolveDeviceAsync(\n  device: string | boolean | undefined\n): Promise<SimControl.SimulatorDevice | SimControl.XCTraceDevice> {\n  if (!(await profileMethod(Simulator.ensureXcodeCommandLineToolsInstalledAsync)())) {\n    throw new CommandError('Unable to verify Xcode and Simulator installation.');\n  }\n  if (!device) {\n    return await profileMethod(\n      Simulator.ensureSimulatorOpenAsync,\n      'Simulator.ensureSimulatorOpenAsync'\n    )();\n  }\n\n  const spinner = ora(\n    `🔍 Finding ${device === true ? 'devices' : `device ${chalk.cyan(device)}`}`\n  ).start();\n  const devices: (\n    | SimControl.SimulatorDevice\n    | SimControl.XCTraceDevice\n  )[] = await getBuildDestinationsAsync().catch(() => []);\n  spinner.stop();\n\n  if (device === true) {\n    // --device with no props after\n    const { value } = await prompt({\n      type: 'autocomplete',\n      name: 'value',\n      limit: 11,\n      message: 'Select a simulator',\n      choices: devices.map(item => {\n        const isConnected = 'deviceType' in item;\n        const isActive = 'state' in item && item.state === 'Booted';\n        const symbol = isConnected ? '🔌 ' : '';\n        const format = isActive ? chalk.bold : (text: string) => text;\n        return {\n          title: `${symbol}${format(item.name)}${\n            item.osVersion ? chalk.dim(` (${item.osVersion})`) : ''\n          }`,\n          value: item.udid,\n        };\n      }),\n      suggest: (input: any, choices: any) => {\n        const regex = new RegExp(input, 'i');\n        return choices.filter((choice: any) => regex.test(choice.title));\n      },\n    });\n    Log.log(chalk.dim`\\u203A Using --device ${value}`);\n    const device = devices.find(device => device.udid === value)!;\n    const isSimulator = !('deviceType' in device);\n    if (isSimulator) {\n      return await Simulator.ensureSimulatorOpenAsync({ udid: device.udid });\n    }\n    return device;\n  }\n  const searchValue = device.toLowerCase();\n  const resolved = devices.find(device => {\n    return device.udid.toLowerCase() === searchValue || device.name.toLowerCase() === searchValue;\n  });\n\n  if (!resolved) {\n    throw new CommandError(`No device UDID or name matching \"${device}\"`);\n  }\n\n  const isSimulator = !('deviceType' in resolved);\n  if (isSimulator) {\n    return await Simulator.ensureSimulatorOpenAsync({ udid: resolved.udid });\n  }\n\n  return resolved;\n}\n"],"file":"resolveDeviceAsync.js"}