{"version":3,"sources":["../src/Analytics.ts"],"names":["PLATFORM_TO_ANALYTICS_PLATFORM","darwin","win32","linux","AnalyticsClient","userId","_userId","version","_version","flush","segmentNodeInstance","initializeClient","apiKey","packageVersion","Segment","flushInterval","identifyUser","traits","userTraits","identify","context","getContext","logEvent","name","properties","track","event","platform","os","ip","address","device","model","brand","release","app","defaultClient"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEA,MAAMA,8BAA8D,GAAG;AACrEC,EAAAA,MAAM,EAAE,KAD6D;AAErEC,EAAAA,KAAK,EAAE,SAF8D;AAGrEC,EAAAA,KAAK,EAAE;AAH8D,CAAvE;;AAMO,MAAMC,eAAN,CAAsB;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAMV,MAANC,MAAM,GAAG;AAClB,WAAO,KAAKC,OAAZ;AACD;;AAEiB,MAAPC,OAAO,GAAG;AACnB,WAAO,KAAKC,QAAZ;AACD;;AAEMC,EAAAA,KAAK,GAAG;AACb,QAAI,KAAKC,mBAAT,EAA8B;AAC5B,WAAKA,mBAAL,CAAyBD,KAAzB;AACD;AACF;;AAEME,EAAAA,gBAAgB,CAACC,MAAD,EAAiBC,cAAjB,EAAyC;AAC9D;AACA,SAAKH,mBAAL,GAA2B,KAAII,wBAAJ,EAAYF,MAAZ,EAAoB;AAAEG,MAAAA,aAAa,EAAE;AAAjB,KAApB,CAA3B;AACA,SAAKP,QAAL,GAAgBK,cAAhB;AACD;;AAEMG,EAAAA,YAAY,CAACX,MAAD,EAAiBY,MAAjB,EAA8B;AAC/C,SAAKX,OAAL,GAAeD,MAAf;AACA,SAAKa,UAAL,GAAkBD,MAAlB;;AAEA,QAAI,KAAKP,mBAAT,EAA8B;AAC5B,WAAKA,mBAAL,CAAyBS,QAAzB,CAAkC;AAChCd,QAAAA,MAAM,EAAE,KAAKC,OADmB;AAEhCW,QAAAA,MAAM,EAAE,KAAKC,UAFmB;AAGhCE,QAAAA,OAAO,EAAE,KAAKC,UAAL;AAHuB,OAAlC;AAKD;AACF;;AAEMC,EAAAA,QAAQ,CAACC,IAAD,EAAeC,UAAe,GAAG,EAAjC,EAAqC;AAClD,QAAI,KAAKd,mBAAL,IAA4B,KAAKJ,OAArC,EAA8C;AAC5C,WAAKI,mBAAL,CAAyBe,KAAzB,CAA+B;AAC7BpB,QAAAA,MAAM,EAAE,KAAKC,OADgB;AAE7BoB,QAAAA,KAAK,EAAEH,IAFsB;AAG7BC,QAAAA,UAH6B;AAI7BJ,QAAAA,OAAO,EAAE,KAAKC,UAAL;AAJoB,OAA/B;AAMD;AACF;;AAEOA,EAAAA,UAAU,GAAG;AACnB,UAAMM,QAAQ,GAAG3B,8BAA8B,CAAC4B,cAAGD,QAAH,EAAD,CAA9B,IAAiDC,cAAGD,QAAH,EAAlE;;AACA,UAAMP,OAAO,GAAG;AACdS,MAAAA,EAAE,EAAEA,eAAGC,OAAH,EADU;AAEdC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAEL,QADD;AAENM,QAAAA,KAAK,EAAEN;AAFD,OAFM;AAMdC,MAAAA,EAAE,EAAE;AACFL,QAAAA,IAAI,EAAEI,QADJ;AAEFpB,QAAAA,OAAO,EAAEqB,cAAGM,OAAH;AAFP,OANU;AAUdC,MAAAA,GAAG,EAAE;AAVS,KAAhB;;AAaA,QAAI,KAAK3B,QAAT,EAAmB;AACjBY,MAAAA,OAAO,CAACe,GAAR,GAAc;AACZ5B,QAAAA,OAAO,EAAE,KAAKC;AADF,OAAd;AAGD;;AAED,WAAOY,OAAP;AACD;;AAxE0B;;;AA2E7B,MAAMgB,aAAa,GAAG,IAAIhC,eAAJ,EAAtB;eAEegC,a","sourcesContent":["import Segment from 'analytics-node';\nimport os from 'os';\n\nimport { ip } from './internal';\n\nconst PLATFORM_TO_ANALYTICS_PLATFORM: { [platform: string]: string } = {\n  darwin: 'Mac',\n  win32: 'Windows',\n  linux: 'Linux',\n};\n\nexport class AnalyticsClient {\n  private userTraits: any;\n  private segmentNodeInstance: Segment | undefined;\n  private _userId: string | undefined;\n  private _version: string | undefined;\n\n  public get userId() {\n    return this._userId;\n  }\n\n  public get version() {\n    return this._version;\n  }\n\n  public flush() {\n    if (this.segmentNodeInstance) {\n      this.segmentNodeInstance.flush();\n    }\n  }\n\n  public initializeClient(apiKey: string, packageVersion: string) {\n    // Do not wait before flushing, we want node to close immediately if the programs ends\n    this.segmentNodeInstance = new Segment(apiKey, { flushInterval: 300 });\n    this._version = packageVersion;\n  }\n\n  public identifyUser(userId: string, traits: any) {\n    this._userId = userId;\n    this.userTraits = traits;\n\n    if (this.segmentNodeInstance) {\n      this.segmentNodeInstance.identify({\n        userId: this._userId,\n        traits: this.userTraits,\n        context: this.getContext(),\n      });\n    }\n  }\n\n  public logEvent(name: string, properties: any = {}) {\n    if (this.segmentNodeInstance && this._userId) {\n      this.segmentNodeInstance.track({\n        userId: this._userId,\n        event: name,\n        properties,\n        context: this.getContext(),\n      });\n    }\n  }\n\n  private getContext() {\n    const platform = PLATFORM_TO_ANALYTICS_PLATFORM[os.platform()] || os.platform();\n    const context = {\n      ip: ip.address(),\n      device: {\n        model: platform,\n        brand: platform,\n      },\n      os: {\n        name: platform,\n        version: os.release(),\n      },\n      app: {},\n    };\n\n    if (this._version) {\n      context.app = {\n        version: this._version,\n      };\n    }\n\n    return context;\n  }\n}\n\nconst defaultClient = new AnalyticsClient();\n\nexport default defaultClient;\n"],"file":"Analytics.js"}